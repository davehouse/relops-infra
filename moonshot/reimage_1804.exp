#!/usr/bin/expect --

proc named {args defaults} {
    upvar 1 "" ""
    array set "" $defaults
    foreach {key value} $args {
        if {![info exists ($key)]} {
            error "bad option '$key', should be one of: [lsort [array names {}]]"
        }
        set ($key) $value
    }
}
named $argv {--chassis "" --node "" --boot-params ""}

set chassis $(--chassis)
set node $(--node)
set boot_params $(--boot-params)

send_user "\rConnecting to $chassis to control $node ..."

set force_conservative 1
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

set timeout 120
spawn ssh -oKexAlgorithms=+diffie-hellman-group1-sha1 -oCiphers=+aes128-cbc -oStrictHostKeyChecking=no "$chassis"
match_max 100000
sleep 5
expect "hpiLO->"
send -- "set node bootonce pxe $node\r"
expect "bootonce: PXE"
expect "hpiLO->"
set retries 2
while { $retries > 0 } {
	send -- "set node power off force $node\r"
	expect "hpiLO->"
	set waiting 6
	send_user "\rWaiting for power off "
	while { $waiting > 0 } {
	    sleep 5
	    set waiting [ expr $waiting - 1 ]
	    send -- "show node power $node\r"
	    expect {
		"*Off" { set waiting -1 }
		"*On" { send_user "." }
	    }
	}
    if { $waiting == -1 } { set retries 0 }
    set retries [ expr $retries - 1 ]
}
send_user "\rPower is off"
send_user "\n\r"
sleep 0.5
set retries 2
while { $retries > 0 } {
	send -- "set node power on $node\r"
	expect "hpiLO->"
	set waiting 6
	send_user "\rWaiting for power on "
	while { $waiting > 0 } {
	    sleep 5
	    set waiting [ expr $waiting - 1 ]
	    send -- "show node power $node\r"
	    expect {
		"*On" { set waiting -1 }
		"*Off" { send_user "." }
	    }
	}
    if { $waiting == -1 } { set retries 0 }
    set retries [ expr $retries - 1 ]
}
send_user "\rPower is on"
send_user "\n\r"
sleep 0.2
expect "hpiLO->"
send -- "connect node vsp $node\r"
send_user "\rcheck vsp\r"
expect "Virtual Serial Port Active: "
send_user "\n\r"
set timeout -1
send_user "\rWaiting for boot menu on $node "
for {set NUM 0} {$NUM <= 5} {incr NUM} {
    send -- " "
    send_user "."
    sleep 5
}
set timeout -1
sleep 2

#expect "Starting drivers. Please wait, this may take a few moments....\r"
#expect "Fetching Netboot Image\r"

expect "Press 'e' to edit the selected item, or 'c' for a command prompt."
# "Chainload Grub on EFI System Partition"
# "Install Ubuntu 18.04 LTS x86_64 on moonshot"
# "Install Ubuntu 16.04.0 LTS x86_64 on moonshot"

# cursor down once
send -- "\[B"
expect "Install Ubuntu"
send -- "e"
set timeout 60
sleep 1
expect "Press Ctrl-x to start"
expect "initrd.gz"
send -- "\[B"
sleep 0.5
send -- "\[B"
sleep 0.5
send -- "\[B"
sleep 0.5
# cursor left to end of previous line
send -- "\[D"
sleep 1
# add a space at the end of line
send -- " "
sleep 0.5
# add parameters
send -- "$boot_params"
sleep 5
# "Ctrl-x to start"
send -- ""
send_user "\rInitiated boot ..."
sleep 60
# exit virtual serial port
send -- "("
expect "hpiLO->"
send -- "exit\r"
expect eof
send_user "\rFinished $chassis $node"

